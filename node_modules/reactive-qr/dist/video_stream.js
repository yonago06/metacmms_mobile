import _regeneratorRuntime from 'babel-runtime/regenerator';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { isSafari } from './helpers';

var videoStyles = {
  display: 'flex'
};

var VideoStream = function (_Component) {
  _inherits(VideoStream, _Component);

  function VideoStream() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    _classCallCheck(this, VideoStream);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = VideoStream.__proto__ || Object.getPrototypeOf(VideoStream)).call.apply(_ref, [this].concat(args))), _this), _this.stream = null, _this.streamWidth = 0, _this.streamHeight = 0, _this.video = null, _this.canvasContext = null, _this.stopCamera = function () {
      if (!_this.stream) return;
      _this.stream.getTracks().map(function (t) {
        return t.stop();
      });
      _this.stream = null;
      _this.streamWidth = 0;
      _this.streamHeight = 0;
      _this.canvasContext = null;
    }, _this.startCamera = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var devices, cameras, videoMode, cameraIndex, cameraEnv, canvas;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.stopCamera();

              if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                _context.next = 3;
                break;
              }

              throw new Error('WebRTC API not supported in this browser');

            case 3:
              _context.next = 5;
              return navigator.mediaDevices.enumerateDevices();

            case 5:
              devices = _context.sent;
              cameras = devices.filter(function (device) {
                return device.kind === 'videoinput';
              });
              videoMode = { facingMode: 'user' };

              if (cameras.length > 1) {
                cameraIndex = _this.props.rearCamera ? 1 : 0;
                cameraEnv = _this.props.rearCamera ? 'environment' : 'user';

                videoMode = isSafari() ? { facingMode: { exact: cameraEnv } } : { deviceId: cameras[cameraIndex].deviceId };
              }

              _context.next = 11;
              return navigator.mediaDevices.getUserMedia({
                audio: false,
                video: videoMode
              });

            case 11:
              _this.stream = _context.sent;


              if (_this.video.srcObject !== undefined) {
                _this.video.srcObject = _this.stream;
              } else if (_this.video.mozSrcObject !== undefined) {
                _this.video.mozSrcObject = _this.stream;
              } else if (window.URL.createObjectURL) {
                _this.video.src = window.URL.createObjectURL(_this.stream);
              } else if (window.webkitURL) {
                _this.video.src = window.webkitURL.createObjectURL(_this.stream);
              } else {
                _this.video.src = _this.stream;
              }

              _this.video.playsInline = true;
              _this.video.play(); // firefox does not emit `loadeddata` if video not playing
              _context.next = 17;
              return _this.streamLoadedPromise();

            case 17:

              _this.streamWidth = _this.video.videoWidth;
              _this.streamHeight = _this.video.videoHeight;

              if (!_this.canvasContext) {
                canvas = document.createElement('canvas');

                canvas.width = _this.streamWidth;
                canvas.height = _this.streamHeight;
                _this.canvasContext = canvas.getContext('2d');
              }

            case 20:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this2);
    })), _this.streamLoadedPromise = function () {
      return new Promise(function (resolve, reject) {
        _this.video.addEventListener('loadeddata', resolve, { once: true });
        _this.video.addEventListener('error', reject, { once: true });
      });
    }, _this.captureFrame = function () {
      _this.canvasContext.drawImage(_this.video, 0, 0, _this.streamWidth, _this.streamHeight);
      return _this.canvasContext.getImageData(0, 0, _this.streamWidth, _this.streamHeight);
    }, _this.drawFrame = function () {
      window.requestAnimationFrame(function () {
        if (!_this.canvasContext) return;

        var _this$captureFrame = _this.captureFrame(),
            data = _this$captureFrame.data;

        _this.props.onFrame({
          data: data,
          width: _this.streamWidth,
          height: _this.streamHeight
        });
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(VideoStream, [{
    key: 'componentDidMount',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var initSuccess, message;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                initSuccess = true;
                message = '';
                _context2.prev = 2;
                _context2.next = 5;
                return this.startCamera();

              case 5:
                _context2.next = 11;
                break;

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2['catch'](2);

                message = 'Browser camera init error: ' + _context2.t0;
                initSuccess = false;

              case 11:

                if (typeof this.props.onInit === 'function') {
                  this.props.onInit({ error: initSuccess, message: message }, this.drawFrame);
                }

              case 12:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[2, 7]]);
      }));

      function componentDidMount() {
        return _ref3.apply(this, arguments);
      }

      return componentDidMount;
    }()
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.stopCamera();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return React.createElement('video', { style: Object.assign({}, videoStyles, this.props.style), ref: function ref(v) {
          return _this3.video = v;
        } });
    }
  }]);

  return VideoStream;
}(Component);

;

VideoStream.propTypes = {
  onInit: PropTypes.func.isRequired,
  onFrame: PropTypes.func.isRequired,
  style: PropTypes.object,
  rearCamera: PropTypes.bool
};

VideoStream.defaultProps = {
  style: {},
  rearCamera: true
};

export default VideoStream;