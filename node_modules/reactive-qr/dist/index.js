var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from "react";
import PropTypes from 'prop-types';
import VideoStream from './video_stream';

var wrapperStyles = {
  display: 'flex',
  height: '100%',
  overflowY: 'hidden'
};

var ReactiveQR = function (_Component) {
  _inherits(ReactiveQR, _Component);

  function ReactiveQR() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReactiveQR);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactiveQR.__proto__ || Object.getPrototypeOf(ReactiveQR)).call.apply(_ref, [this].concat(args))), _this), _this.webWorker = null, _this.onVideoStreamInit = function (state, drawFrame) {
      if (_this.props.onInit) {
        _this.props.onInit(state);
      }
      _this.drawVideoFrame = drawFrame;

      if (_this.props.shouldDecode) {
        _this.drawVideoFrame();
      }
    }, _this.onFrame = function (frameData) {
      return _this.webWorker.postMessage(frameData);
    }, _this.drawVideoFrame = function () {}, _this.onFrameDecoded = function (event) {
      var code = event.data;
      if (code) {
        var data = code.data;

        if (_this.props.onCode && data.length > 0) {
          _this.props.onCode(code);
        }
      }

      if (_this.props.shouldDecode) {
        _this.drawVideoFrame();
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReactiveQR, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.webWorker = new Worker('qr_decode.worker.js');
      this.webWorker.addEventListener('message', this.onFrameDecoded);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.webWorker !== null) {
        this.webWorker.terminate();
        this.webWorker = null;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        { className: this.props.className, style: Object.assign({}, wrapperStyles, this.props.style) },
        React.createElement(VideoStream, {
          onFrame: this.onFrame,
          onInit: this.onVideoStreamInit,
          rearCamera: this.props.rearCamera,
          style: this.props.videoStyle
        })
      );
    }
  }]);

  return ReactiveQR;
}(Component);

ReactiveQR.propTypes = {
  onInit: PropTypes.func,
  shouldDecode: PropTypes.bool,
  onCode: PropTypes.func,
  style: PropTypes.object,
  videoStyle: PropTypes.object,
  rearCamera: PropTypes.bool,
  className: PropTypes.string
};

ReactiveQR.defaultProps = {
  onInit: function onInit() {},
  shouldDecode: true,
  onCode: function onCode() {},
  style: {},
  videoStyle: {},
  rearCamera: true,
  className: undefined
};

export default ReactiveQR;